---
export type Siding = "N"|"E"|"S"|"W";
export type Path = `${Siding|""}-${Siding|""}`;

export type Props = {
  path: Path
  dot?: boolean
  line?: boolean
  stretch?: boolean
}

const { path, dot, line = true, stretch = true } = Astro.props

function point(loc: Siding|"") {
  switch (loc) {
    case "N": return "50 0";
    case "E": return "100 50";
    case "S": return "50 100";
    case "W": return "0 50";
    default: return "50 50";
  }
} 

function d() {
  const [s1, s2] = path.split("-") as [Siding|"", Siding|""];
  return `M${point(s1)} L${point(s2)}`;
}

const classList=[];
if (stretch) {
  classList.push("stretch")
}

---

<svg xmlns="http://www.w3.org/2000/svg" class:list={classList} viewBox={`0 0 100 100`} preserveAspectRatio="none" stroke-linecap="round" stroke-linejoin="round">
  {line && <path d={d()} />}
  {dot && <circle cx="50%" cy="50%" r="20" />}
</svg>

<style lang="scss">
  svg {
    > * {
      vector-effect: non-scaling-stroke;
    }

    > path {
      stroke: var(--secondary-color);
      stroke-width: 8px;
    }

    > circle {
      fill: var(--accent-color);
      stroke: white;
      stroke-width: 1.5px;
    }

    &.stretch {
      width: 100%;
      height: 100%;
    }
    
    
  }
</style>